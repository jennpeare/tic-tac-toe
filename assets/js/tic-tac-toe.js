// Generated by CoffeeScript 1.3.3
(function() {
  var EMPTY, O_PLAYER, TIE, TicTacToe, X_PLAYER, game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EMPTY = void 0;

  O_PLAYER = 0;

  X_PLAYER = 1;

  TIE = 2;

  TicTacToe = (function() {

    function TicTacToe(id) {
      var i, _ref;
      this.id = id;
      this.findSquareIndex = __bind(this.findSquareIndex, this);

      this.captureClick = __bind(this.captureClick, this);

      this.canvas = document.getElementById(this.id);
      this.context = this.canvas.getContext('2d');
      this.$canvas = $('#' + this.id);
      this.height = this.$canvas.height();
      this.width = this.$canvas.width();
      _ref = this.$canvas.position(), this.x = _ref.x, this.y = _ref.y;
      this.$canvas.on('click', this.captureClick);
      this.canvas.setAttribute('height', this.height);
      this.canvas.setAttribute('width', this.width);
      this.symbols = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < 9; i = ++_i) {
          _results.push(EMPTY);
        }
        return _results;
      })();
      this.symbolCoordinates = this.calculateSymbolCoordinates();
      this.currentPlayer = O_PLAYER;
      this.drawBoard();
    }

    TicTacToe.prototype.announce = function(text) {
      var centerX, centerY;
      centerX = this.width / 2;
      centerY = this.height / 2;
      this.context.beginPath();
      this.context.rect(0, centerY / 2, this.width, centerY);
      this.context.fillStyle = '#000000';
      this.context.fill();
      this.context.font = "" + (centerY / 3) + "px sans-serif";
      this.context.textAlign = 'center';
      this.context.textBaseline = 'middle';
      this.context.fillStyle = '#FFFFFF';
      this.context.fillText(text, centerX, centerY);
      return this;
    };

    TicTacToe.prototype.endGame = function(winner) {
      var announcement;
      this.$canvas.off('click').css('cursor', 'default');
      if (winner === O_PLAYER) {
        announcement = 'O WINS!';
      } else if (winner === X_PLAYER) {
        announcement = 'X WINS!';
      } else {
        announcement = 'TIE!';
      }
      return this.announce(announcement);
    };

    TicTacToe.prototype.captureClick = function(e) {
      var squareIndex, winner;
      squareIndex = this.findSquareIndex(e);
      if (this.symbols[squareIndex] === EMPTY) {
        this.drawSymbol(squareIndex);
        this.populateSquare(squareIndex);
        winner = this.checkForWin();
        if (winner !== void 0) {
          this.endGame(winner);
        }
      }
      return this;
    };

    TicTacToe.prototype.findSquareIndex = function(e) {
      var diff, i, minDiff, minI, symbolCoordinate, symbolX, symbolY, x, xDiff, y, yDiff, _i, _len, _ref, _ref1;
      _ref = [e.offsetX, e.offsetY], x = _ref[0], y = _ref[1];
      minI = void 0;
      minDiff = void 0;
      _ref1 = this.symbolCoordinates;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        symbolCoordinate = _ref1[i];
        symbolX = symbolCoordinate[0], symbolY = symbolCoordinate[1];
        xDiff = Math.abs(x - symbolX);
        yDiff = Math.abs(y - symbolY);
        diff = xDiff + yDiff;
        if (minDiff === void 0 || diff < minDiff) {
          minDiff = diff;
          minI = i;
        }
      }
      return minI;
    };

    TicTacToe.prototype.drawSymbol = function(index) {
      var thirdHeight, thirdWidth, x, y, _ref;
      _ref = this.symbolCoordinates[index], x = _ref[0], y = _ref[1];
      thirdHeight = this.height / 6;
      thirdWidth = this.width / 6;
      if (this.currentPlayer === X_PLAYER) {
        this.drawX(x, y, thirdHeight, thirdWidth);
      } else {
        this.drawO(x, y, Math.min(thirdHeight, thirdWidth));
      }
      return this;
    };

    TicTacToe.prototype.drawO = function(x, y, squareSize) {
      var radius;
      radius = squareSize * 0.75;
      this.context.beginPath();
      this.context.arc(x, y, radius, 0, 2 * Math.PI, false);
      this.context.lineWidth = 3;
      this.context.stroke();
      return this;
    };

    TicTacToe.prototype.drawX = function(x, y, height, width) {
      var halfHeight, halfWidth;
      halfHeight = height / 2;
      halfWidth = width / 2;
      this.context.beginPath();
      this.context.moveTo(x - halfWidth, y - halfHeight);
      this.context.lineTo(x + halfWidth, y + halfHeight);
      this.context.moveTo(x - halfWidth, y + halfHeight);
      this.context.lineTo(x + halfWidth, y - halfHeight);
      this.context.lineWidth = 3;
      this.context.stroke();
      return this;
    };

    TicTacToe.prototype.populateSquare = function(index) {
      this.symbols[index] = this.currentPlayer;
      this.currentPlayer = this.currentPlayer === X_PLAYER ? O_PLAYER : X_PLAYER;
      return this;
    };

    TicTacToe.prototype.checkForWin = function() {
      var symbol, tie, winner, _i, _len, _ref;
      winner = void 0;
      if ((this.symbols[0] !== EMPTY && this.symbols[0] === this.symbols[1] && this.symbols[0] === this.symbols[2]) || (this.symbols[0] !== EMPTY && this.symbols[0] === this.symbols[3] && this.symbols[0] === this.symbols[6]) || (this.symbols[0] !== EMPTY && this.symbols[0] === this.symbols[4] && this.symbols[0] === this.symbols[8])) {
        winner = this.symbols[0];
      } else if ((this.symbols[2] !== EMPTY && this.symbols[2] === this.symbols[4] && this.symbols[2] === this.symbols[6]) || (this.symbols[2] !== EMPTY && this.symbols[2] === this.symbols[5] && this.symbols[2] === this.symbols[8])) {
        winner = this.symbols[2];
      } else if (this.symbols[1] !== EMPTY && this.symbols[1] === this.symbols[4] && this.symbols[1] === this.symbols[7]) {
        winner = this.symbols[1];
      } else if (this.symbols[6] !== EMPTY && this.symbols[6] === this.symbols[7] && this.symbols[6] === this.symbols[8]) {
        winner = this.symbols[6];
      } else if (this.symbols[3] !== EMPTY && this.symbols[3] === this.symbols[4] && this.symbols[3] === this.symbols[5]) {
        winner = this.symbols[3];
      }
      if (winner === void 0) {
        tie = true;
        _ref = this.symbols;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          symbol = _ref[_i];
          if (symbol === EMPTY) {
            tie = false;
          }
        }
        if (tie === true) {
          winner = TIE;
        }
      }
      return winner;
    };

    TicTacToe.prototype.calculateSymbolCoordinates = function() {
      var i, j, sixthHeight, sixthWidth, symbolCoordinates, thirdHeight, thirdWidth, x, y, _i, _j;
      symbolCoordinates = [];
      sixthHeight = this.height / 6;
      sixthWidth = this.width / 6;
      thirdHeight = sixthHeight * 2;
      thirdWidth = sixthWidth * 2;
      for (i = _i = 0; _i < 3; i = ++_i) {
        y = sixthHeight + i * thirdHeight;
        for (j = _j = 0; _j < 3; j = ++_j) {
          x = sixthWidth + j * thirdWidth;
          symbolCoordinates.push([x, y]);
        }
      }
      return symbolCoordinates;
    };

    TicTacToe.prototype.drawBoard = function() {
      var thirdHeight, thirdWidth;
      thirdHeight = this.height / 3;
      thirdWidth = this.width / 3;
      this.context.beginPath();
      this.context.moveTo(0, thirdHeight);
      this.context.lineTo(this.width, thirdHeight);
      this.context.moveTo(0, 2 * thirdHeight);
      this.context.lineTo(this.width, 2 * thirdHeight);
      this.context.moveTo(thirdWidth, 0);
      this.context.lineTo(thirdWidth, this.height);
      this.context.moveTo(2 * thirdWidth, 0);
      this.context.lineTo(2 * thirdWidth, this.height);
      this.context.stroke();
      return this;
    };

    return TicTacToe;

  })();

  game = new TicTacToe('tic_tac_toe');

}).call(this);
